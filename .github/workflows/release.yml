on:
  push:
    tags:
      - "v*"

name: Release

env:
  RELEASE_BIN: clicky
  RELEASE_DIR: artifacts
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_AMD64_TARGET: x86_64-unknown-linux-musl
  LINUX_ARM64_TARGET: aarch64-unknown-linux-musl

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            rust: stable
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            rust: stable
          - target: x86_64-apple-darwin
            os: macos-latest
            rust: stable
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target }}

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Install ALSA libraries for cross-compilation
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libasound2-dev
      - name: Install C compilation tooling (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install clang gcc-aarch64-linux-gnu -y
          echo "TARGET_CC=clang" >> $GITHUB_ENV
          echo "CFLAGS_aarch64_unknown_linux_musl=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=/usr/aarch64-linux-gnu/bin/ld" >> $GITHUB_ENV

      - name: Setup pkg-config for cross-compilation
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Install p7zip (MacOS)
        if: matrix.os == 'macos-latest'
        run: brew install p7zip

      - name: Build
        run: cargo build --release

      - name: Set RUSTFLAGS (Windows)
        if: matrix.os == 'windows-latest'
        run: echo "RUSTFLAGS=-Ctarget-feature=+crt-static" >> $GITHUB_ENV

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir -p ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}

      - name: Move binaries (Linux/MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}

      - name: Move binaries (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp ./target/release/${{ env.RELEASE_BIN }}.exe ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.exe

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
            ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
            ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.exe
          if-no-files-found: error

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Linux amd64 tarball
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.LINUX_AMD64_TARGET }}

      - name: Download Linux arm64 tarball
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.LINUX_ARM64_TARGET }}

      - name: Download Windows tarball
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.WINDOWS_TARGET }}

      - name: Download MacOS tarball
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.MACOS_TARGET }}

      - name: List files
        run: ls -lah *

      - name: Release Linux amd64 tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_AMD64_TARGET }}
          asset_name: clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_AMD64_TARGET }}

      - name: Release Linux arm64 tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_ARM64_TARGET }}
          asset_name: clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_ARM64_TARGET }}

      - name: Release Windows tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.exe
          asset_name: clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}

      - name: Release MacOS tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}
          asset_name: clicky-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}
